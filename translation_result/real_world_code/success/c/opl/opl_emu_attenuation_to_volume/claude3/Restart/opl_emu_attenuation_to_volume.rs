
use std::num::Wrapping;

const fn x(a: u16) -> u16 {
    ((a | 0x400) << 2) as u16
}

static S_POWER_TABLE: [u16; 256] = [
    x(0x3fa), x(0x3f5), x(0x3ef), x(0x3ea), x(0x3e4), x(0x3df), x(0x3da), x(0x3d4),
    x(0x3cf), x(0x3c9), x(0x3c4), x(0x3bf), x(0x3b9), x(0x3b4), x(0x3ae), x(0x3a9),
    x(0x3a4), x(0x39f), x(0x399), x(0x394), x(0x38f), x(0x38a), x(0x384), x(0x37f),
    x(0x37a), x(0x375), x(0x370), x(0x36a), x(0x365), x(0x360), x(0x35b), x(0x356),
    x(0x351), x(0x34c), x(0x347), x(0x342), x(0x33d), x(0x338), x(0x333), x(0x32e),
    x(0x329), x(0x324), x(0x31f), x(0x31a), x(0x315), x(0x310), x(0x30b), x(0x306),
    x(0x302), x(0x2fd), x(0x2f8), x(0x2f3), x(0x2ee), x(0x2e9), x(0x2e5), x(0x2e0),
    x(0x2db), x(0x2d6), x(0x2d2), x(0x2cd), x(0x2c8), x(0x2c4), x(0x2bf), x(0x2ba),
    x(0x2b5), x(0x2b1), x(0x2ac), x(0x2a8), x(0x2a3), x(0x29e), x(0x29a), x(0x295),
    x(0x291), x(0x28c), x(0x288), x(0x283), x(0x27f), x(0x27a), x(0x276), x(0x271),
    x(0x26d), x(0x268), x(0x264), x(0x25f), x(0x25b), x(0x257), x(0x252), x(0x24e),
    x(0x249), x(0x245), x(0x241), x(0x23c), x(0x238), x(0x234), x(0x230), x(0x22b),
    x(0x227), x(0x223), x(0x21e), x(0x21a), x(0x216), x(0x212), x(0x20e), x(0x209),
    x(0x205), x(0x201), x(0x1fd), x(0x1f9), x(0x1f5), x(0x1f0), x(0x1ec), x(0x1e8),
    x(0x1e4), x(0x1e0), x(0x1dc), x(0x1d8), x(0x1d4), x(0x1d0), x(0x1cc), x(0x1c8),
    x(0x1c4), x(0x1c0), x(0x1bc), x(0x1b8), x(0x1b4), x(0x1b0), x(0x1ac), x(0x1a8),
    x(0x1a4), x(0x1a0), x(0x19c), x(0x199), x(0x195), x(0x191), x(0x18d), x(0x189),
    x(0x185), x(0x181), x(0x17e), x(0x17a), x(0x176), x(0x172), x(0x16f), x(0x16b),
    x(0x167), x(0x163), x(0x160), x(0x15c), x(0x158), x(0x154), x(0x151), x(0x14d),
    x(0x149), x(0x146), x(0x142), x(0x13e), x(0x13b), x(0x137), x(0x134), x(0x130),
    x(0x12c), x(0x129), x(0x125), x(0x122), x(0x11e), x(0x11b), x(0x117), x(0x114),
    x(0x110), x(0x10c), x(0x109), x(0x106), x(0x102), x(0x0ff), x(0x0fb), x(0x0f8),
    x(0x0f4), x(0x0f1), x(0x0ed), x(0x0ea), x(0x0e7), x(0x0e3), x(0x0e0), x(0x0dc),
    x(0x0d9), x(0x0d6), x(0x0d2), x(0x0cf), x(0x0cc), x(0x0c8), x(0x0c5), x(0x0c2),
    x(0x0be), x(0x0bb), x(0x0b8), x(0x0b5), x(0x0b1), x(0x0ae), x(0x0ab), x(0x0a8),
    x(0x0a4), x(0x0a1), x(0x09e), x(0x09b), x(0x098), x(0x094), x(0x091), x(0x08e),
    x(0x08b), x(0x088), x(0x085), x(0x082), x(0x07e), x(0x07b), x(0x078), x(0x075),
    x(0x072), x(0x06f), x(0x06c), x(0x069), x(0x066), x(0x063), x(0x060), x(0x05d),
    x(0x05a), x(0x057), x(0x054), x(0x051), x(0x04e), x(0x04b), x(0x048), x(0x045),
    x(0x042), x(0x03f), x(0x03c), x(0x039), x(0x036), x(0x033), x(0x030), x(0x02d),
    x(0x02a), x(0x028), x(0x025), x(0x022), x(0x01f), x(0x01c), x(0x019), x(0x016),
    x(0x014), x(0x011), x(0x00e), x(0x00b), x(0x008), x(0x006), x(0x003), x(0x000)
];

pub fn opl_emu_attenuation_to_volume(input: u32) -> u32 {
    let index = (input & 0xff) as usize;
    let shift = (input >> 8) as u32;
    Wrapping(S_POWER_TABLE[index] as u32).0.wrapping_shr(shift)
}
