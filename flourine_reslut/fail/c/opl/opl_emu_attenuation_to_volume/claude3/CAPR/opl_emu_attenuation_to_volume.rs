

use std::num::Wrapping;

pub fn opl_emu_attenuation_to_volume(input: u32) -> u32 {
    let s_power_table: [u16; 256] = [
        0x3fa0, 0x3f50, 0x3ef0, 0x3ea0, 0x3e40, 0x3df0, 0x3da0, 0x3d40,
        0x3cf0, 0x3c90, 0x3c40, 0x3bf0, 0x3b90, 0x3b40, 0x3ae0, 0x3a90,
        0x3a40, 0x39f0, 0x3990, 0x3940, 0x38f0, 0x38a0, 0x3840, 0x37f0,
        0x37a0, 0x3750, 0x3700, 0x36a0, 0x3650, 0x3600, 0x35b0, 0x3560,
        0x3510, 0x34c0, 0x3470, 0x3420, 0x33d0, 0x3380, 0x3330, 0x32e0,
        0x3290, 0x3240, 0x31f0, 0x31a0, 0x3150, 0x3100, 0x30b0, 0x3060,
        0x3020, 0x2fd0, 0x2f80, 0x2f30, 0x2ee0, 0x2e90, 0x2e50, 0x2e00,
        0x2db0, 0x2d60, 0x2d20, 0x2cd0, 0x2c80, 0x2c40, 0x2bf0, 0x2ba0,
        0x2b50, 0x2b10, 0x2ac0, 0x2a80, 0x2a30, 0x29e0, 0x29a0, 0x2950,
        0x2910, 0x28c0, 0x2880, 0x2830, 0x27f0, 0x27a0, 0x2760, 0x2710,
        0x26d0, 0x2680, 0x2640, 0x25f0, 0x25b0, 0x2570, 0x2520, 0x24e0,
        0x2490, 0x2450, 0x2410, 0x23c0, 0x2380, 0x2340, 0x2300, 0x22b0,
        0x2270, 0x2230, 0x21e0, 0x21a0, 0x2160, 0x2120, 0x20e0, 0x2090,
        0x2050, 0x2010, 0x1fd0, 0x1f90, 0x1f50, 0x1f00, 0x1ec0, 0x1e80,
        0x1e40, 0x1e00, 0x1dc0, 0x1d80, 0x1d40, 0x1d00, 0x1cc0, 0x1c80,
        0x1c40, 0x1c00, 0x1bc0, 0x1b80, 0x1b40, 0x1b00, 0x1ac0, 0x1a80,
        0x1a40, 0x1a00, 0x19c0, 0x1990, 0x1950, 0x1910, 0x18d0, 0x1890,
        0x1850, 0x1810, 0x17e0, 0x17a0, 0x1760, 0x1720, 0x16f0, 0x16b0,
        0x1670, 0x1630, 0x1600, 0x15c0, 0x1580, 0x1540, 0x1510, 0x14d0,
        0x1490, 0x1460, 0x1420, 0x13e0, 0x13b0, 0x1370, 0x1340, 0x1300,
        0x12c0, 0x1290, 0x1250, 0x1220, 0x11e0, 0x11b0, 0x1170, 0x1140,
        0x1100, 0x10c0, 0x1090, 0x1060, 0x1020, 0x0ff0, 0x0fb0, 0x0f80,
        0x0f40, 0x0f10, 0x0ed0, 0x0ea0, 0x0e70, 0x0e30, 0x0e00, 0x0dc0,
        0x0d90, 0x0d60, 0x0d20, 0x0cf0, 0x0cc0, 0x0c80, 0x0c50, 0x0c20,
        0x0be0, 0x0bb0, 0x0b80, 0x0b50, 0x0b10, 0x0ae0, 0x0ab0, 0x0a80,
        0x0a40, 0x0a10, 0x09e0, 0x09b0, 0x0980, 0x0940, 0x0910, 0x08e0,
        0x08b0, 0x0880, 0x0850, 0x0820, 0x07e0, 0x07b0, 0x0780, 0x0750,
        0x0720, 0x06f0, 0x06c0, 0x0690, 0x0660, 0x0630, 0x0600, 0x05d0,
        0x05a0, 0x0570, 0x0540, 0x0510, 0x04e0, 0x04b0, 0x0480, 0x0450,
        0x0420, 0x03f0, 0x03c0, 0x0390, 0x0360, 0x0330, 0x0300, 0x02d0,
        0x02a0, 0x0280, 0x0250, 0x0220, 0x01f0, 0x01c0, 0x0190, 0x0160,
        0x0140, 0x0110, 0x00e0, 0x00b0, 0x0080, 0x0060, 0x0030, 0x0000,
    ];

    let fractional_part = s_power_table[(input & 0xff) as usize];
    let whole_part = (input >> 8) as u32;
    let wrapped_fractional_part = Wrapping(fractional_part as u32);
    wrapped_fractional_part.0.wrapping_shr(whole_part)
}

