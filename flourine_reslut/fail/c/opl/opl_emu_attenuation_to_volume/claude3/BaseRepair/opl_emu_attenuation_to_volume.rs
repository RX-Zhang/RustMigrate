
use std::num::Wrapping;

pub fn opl_emu_attenuation_to_volume(input: u32) -> u32 {
    // the values here are 10-bit mantissas with an implied leading bit
    // this matches the internal format of the OPN chip, extracted from the die

    // as a nod to performance, the implicit 0x400 bit is pre-incorporated, and
    // the values are left-shifted by 2 so that a simple right shift is all that
    // is needed; also the order is reversed to save a NOT on the input
    let s_power_table: [u16; 256] = [
        0x3fa | 0x400 << 2, 0x3f5 | 0x400 << 2, 0x3ef | 0x400 << 2, 0x3ea | 0x400 << 2,
        0x3e4 | 0x400 << 2, 0x3df | 0x400 << 2, 0x3da | 0x400 << 2, 0x3d4 | 0x400 << 2,
        0x3cf | 0x400 << 2, 0x3c9 | 0x400 << 2, 0x3c4 | 0x400 << 2, 0x3bf | 0x400 << 2,
        0x3b9 | 0x400 << 2, 0x3b4 | 0x400 << 2, 0x3ae | 0x400 << 2, 0x3a9 | 0x400 << 2,
        0x3a4 | 0x400 << 2, 0x39f | 0x400 << 2, 0x399 | 0x400 << 2, 0x394 | 0x400 << 2,
        0x38f | 0x400 << 2, 0x38a | 0x400 << 2, 0x384 | 0x400 << 2, 0x37f | 0x400 << 2,
        0x37a | 0x400 << 2, 0x375 | 0x400 << 2, 0x370 | 0x400 << 2, 0x36a | 0x400 << 2,
        0x365 | 0x400 << 2, 0x360 | 0x400 << 2, 0x35b | 0x400 << 2, 0x356 | 0x400 << 2,
        0x351 | 0x400 << 2, 0x34c | 0x400 << 2, 0x347 | 0x400 << 2, 0x342 | 0x400 << 2,
        0x33d | 0x400 << 2, 0x338 | 0x400 << 2, 0x333 | 0x400 << 2, 0x32e | 0x400 << 2,
        0x329 | 0x400 << 2, 0x324 | 0x400 << 2, 0x31f | 0x400 << 2, 0x31a | 0x400 << 2,
        0x315 | 0x400 << 2, 0x310 | 0x400 << 2, 0x30b | 0x400 << 2, 0x306 | 0x400 << 2,
        0x302 | 0x400 << 2, 0x2fd | 0x400 << 2, 0x2f8 | 0x400 << 2, 0x2f3 | 0x400 << 2,
        0x2ee | 0x400 << 2, 0x2e9 | 0x400 << 2, 0x2e5 | 0x400 << 2, 0x2e0 | 0x400 << 2,
        0x2db | 0x400 << 2, 0x2d6 | 0x400 << 2, 0x2d2 | 0x400 << 2, 0x2cd | 0x400 << 2,
        0x2c8 | 0x400 << 2, 0x2c4 | 0x400 << 2, 0x2bf | 0x400 << 2, 0x2ba | 0x400 << 2,
        0x2b5 | 0x400 << 2, 0x2b1 | 0x400 << 2, 0x2ac | 0x400 << 2, 0x2a8 | 0x400 << 2,
        0x2a3 | 0x400 << 2, 0x29e | 0x400 << 2, 0x29a | 0x400 << 2, 0x295 | 0x400 << 2,
        0x291 | 0x400 << 2, 0x28c | 0x400 << 2, 0x288 | 0x400 << 2, 0x283 | 0x400 << 2,
        0x27f | 0x400 << 2, 0x27a | 0x400 << 2, 0x276 | 0x400 << 2, 0x271 | 0x400 << 2,
        0x26d | 0x400 << 2, 0x268 | 0x400 << 2, 0x264 | 0x400 << 2, 0x25f | 0x400 << 2,
        0x25b | 0x400 << 2, 0x257 | 0x400 << 2, 0x252 | 0x400 << 2, 0x24e | 0x400 << 2,
        0x249 | 0x400 << 2, 0x245 | 0x400 << 2, 0x241 | 0x400 << 2, 0x23c | 0x400 << 2,
        0x238 | 0x400 << 2, 0x234 | 0x400 << 2, 0x230 | 0x400 << 2, 0x22b | 0x400 << 2,
        0x227 | 0x400 << 2, 0x223 | 0x400 << 2, 0x21e | 0x400 << 2, 0x21a | 0x400 << 2,
        0x216 | 0x400 << 2, 0x212 | 0x400 << 2, 0x20e | 0x400 << 2, 0x209 | 0x400 << 2,
        0x205 | 0x400 << 2, 0x201 | 0x400 << 2, 0x1fd | 0x400 << 2, 0x1f9 | 0x400 << 2,
        0x1f5 | 0x400 << 2, 0x1f0 | 0x400 << 2, 0x1ec | 0x400 << 2, 0x1e8 | 0x400 << 2,
        0x1e4 | 0x400 << 2, 0x1e0 | 0x400 << 2, 0x1dc | 0x400 << 2, 0x1d8 | 0x400 << 2,
        0x1d4 | 0x400 << 2, 0x1d0 | 0x400 << 2, 0x1cc | 0x400 << 2, 0x1c8 | 0x400 << 2,
        0x1c4 | 0x400 << 2, 0x1c0 | 0x400 << 2, 0x1bc | 0x400 << 2, 0x1b8 | 0x400 << 2,
        0x1b4 | 0x400 << 2, 0x1b0 | 0x400 << 2, 0x1ac | 0x400 << 2, 0x1a8 | 0x400 << 2,
        0x1a4 | 0x400 << 2, 0x1a0 | 0x400 << 2, 0x19c | 0x400 << 2, 0x199 | 0x400 << 2,
        0x195 | 0x400 << 2, 0x191 | 0x400 << 2, 0x18d | 0x400 << 2, 0x189 | 0x400 << 2,
        0x185 | 0x400 << 2, 0x181 | 0x400 << 2, 0x17e | 0x400 << 2, 0x17a | 0x400 << 2,
        0x176 | 0x400 << 2, 0x172 | 0x400 << 2, 0x16f | 0x400 << 2, 0x16b | 0x400 << 2,
        0x167 | 0x400 << 2, 0x163 | 0x400 << 2, 0x160 | 0x400 << 2, 0x15c | 0x400 << 2,
        0x158 | 0x400 << 2, 0x154 | 0x400 << 2, 0x151 | 0x400 << 2, 0x14d | 0x400 << 2,
        0x149 | 0x400 << 2, 0x146 | 0x400 << 2, 0x142 | 0x400 << 2, 0x13e | 0x400 << 2,
        0x13b | 0x400 << 2, 0x137 | 0x400 << 2, 0x134 | 0x400 << 2, 0x130 | 0x400 << 2,
        0x12c | 0x400 << 2, 0x129 | 0x400 << 2, 0x125 | 0x400 << 2, 0x122 | 0x400 << 2,
        0x11e | 0x400 << 2, 0x11b | 0x400 << 2, 0x117 | 0x400 << 2, 0x114 | 0x400 << 2,
        0x110 | 0x400 << 2, 0x10c | 0x400 << 2, 0x109 | 0x400 << 2, 0x106 | 0x400 << 2,
        0x102 | 0x400 << 2, 0x0ff | 0x400 << 2, 0x0fb | 0x400 << 2, 0x0f8 | 0x400 << 2,
        0x0f4 | 0x400 << 2, 0x0f1 | 0x400 << 2, 0x0ed | 0x400 << 2, 0x0ea | 0x400 << 2,
        0x0e7 | 0x400 << 2, 0x0e3 | 0x400 << 2, 0x0e0 | 0x400 << 2, 0x0dc | 0x400 << 2,
        0x0d9 | 0x400 << 2, 0x0d6 | 0x400 << 2, 0x0d2 | 0x400 << 2, 0x0cf | 0x400 << 2,
        0x0cc | 0x400 << 2, 0x0c8 | 0x400 << 2, 0x0c5 | 0x400 << 2, 0x0c2 | 0x400 << 2,
        0x0be | 0x400 << 2, 0x0bb | 0x400 << 2, 0x0b8 | 0x400 << 2, 0x0b5 | 0x400 << 2,
        0x0b1 | 0x400 << 2, 0x0ae | 0x400 << 2, 0x0ab | 0x400 << 2, 0x0a8 | 0x400 << 2,
        0x0a4 | 0x400 << 2, 0x0a1 | 0x400 << 2, 0x09e | 0x400 << 2, 0x09b | 0x400 << 2,
        0x098 | 0x400 << 2, 0x094 | 0x400 << 2, 0x091 | 0x400 << 2, 0x08e | 0x400 << 2,
        0x08b | 0x400 << 2, 0x088 | 0x400 << 2, 0x085 | 0x400 << 2, 0x082 | 0x400 << 2,
        0x07e | 0x400 << 2, 0x07b | 0x400 << 2, 0x078 | 0x400 << 2, 0x075 | 0x400 << 2,
        0x072 | 0x400 << 2, 0x06f | 0x400 << 2, 0x06c | 0x400 << 2, 0x069 | 0x400 << 2,
        0x066 | 0x400 << 2, 0x063 | 0x400 << 2, 0x060 | 0x400 << 2, 0x05d | 0x400 << 2,
        0x05a | 0x400 << 2, 0x057 | 0x400 << 2, 0x054 | 0x400 << 2, 0x051 | 0x400 << 2,
        0x04e | 0x400 << 2, 0x04b | 0x400 << 2, 0x048 | 0x400 << 2, 0x045 | 0x400 << 2,
        0x042 | 0x400 << 2, 0x03f | 0x400 << 2, 0x03c | 0x400 << 2, 0x039 | 0x400 << 2,
        0x036 | 0x400 << 2, 0x033 | 0x400 << 2, 0x030 | 0x400 << 2, 0x02d | 0x400 << 2,
        0x02a | 0x400 << 2, 0x028 | 0x400 << 2, 0x025 | 0x400 << 2, 0x022 | 0x400 << 2,
        0x01f | 0x400 << 2, 0x01c | 0x400 << 2, 0x019 | 0x400 << 2, 0x016 | 0x400 << 2,
        0x014 | 0x400 << 2, 0x011 | 0x400 << 2, 0x00e | 0x400 << 2, 0x00b | 0x400 << 2,
        0x008 | 0x400 << 2, 0x006 | 0x400 << 2, 0x003 | 0x400 << 2, 0x000 | 0x400 << 2,
    ];

    // look up the fractional part, then shift by the whole
    let wrapping_input = Wrapping(input);
    let fractional_part = wrapping_input.0 & 0xff;
    let whole_part = wrapping_input.0 >> 8;
    let result = s_power_table[fractional_part as usize] >> whole_part;
    result as u32
}
